package com.samton.server;

import com.samton.util.DocumentCommun;
import com.samton.util.LogProducerUtils;


import com.samton.util.RedisUtil;
import enums.MsgType;
import enums.TSPConfigure;
import io.netty.handler.timeout.IdleState;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import io.netty.util.ReferenceCountUtil;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.socket.SocketChannel;

import msg.*;
import org.bson.Document;
import org.slf4j.Logger;
import redis.clients.jedis.Jedis;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;


/**
 * Created with IntelliJ IDEA.
 * 作者: duyingfeng
 * 日期: 17-8-31
 * 说明:
 * T
 */
public class NettyServerHandler extends SimpleChannelInboundHandler<BaseMsg> {
    private static final InternalLogger log = InternalLoggerFactory.getInstance(NettyServerHandler.class);

    private GpsThread gpsThread=null;
    private WakeUpTread  wakeUpTread=null;
    private TSPSpeedUpTread  tspSpeedUpTread=null;
    private TSPSharpBendThread tspSharpBendThread=null;
    private TSPSharpSlowBownTread tspSharpSlowBownTread=null;
    private TSPCallPoliceTread     tspCallPoliceTread=null;
    private TSPFatigueDrivingTread tspFatigueDrivingTread=null;
    private TSPLdleCallPoliceTread  tspLdleCallPoliceTread=null;
    private TSPConDrivingPoliThread tspConDrivingPoliThread=null;
    private ThreadPoolExecutor threadPoolExecutor  =ThreadPoolExecutor.getInstance();


    public NettyServerHandler(LogProducerUtils kafk, Jedis jedis) {
        this.kafk = kafk;
        this.jedis = jedis;
    }

    private  Jedis jedis;
    private  LogProducerUtils kafk;

    public LogProducerUtils getKafk() {
        return kafk;
    }

    public void setKafk(LogProducerUtils kafk) {
        this.kafk = kafk;
    }

    public Jedis getJedis() {
        return jedis;
    }

    public void setJedis(Jedis jedis) {
        this.jedis = jedis;
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
        //channel失效，从Map中移除
        if(!ctx.channel().isActive()){
            NettyChannelMap.remove((SocketChannel) ctx.channel());
            log.debug("移除了channel"+(SocketChannel) ctx.channel());
        }

    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        System.out.println("错误原因：" + cause.getMessage());
        ctx.fireExceptionCaught(cause);
        if(!ctx.channel().isActive()){
            System.out.println("SimpleClient:" + ctx.channel().remoteAddress()+ "异常");
            log.debug(ctx.channel().remoteAddress()+ "异常");
            log.info(ctx.channel().remoteAddress()+ "异常");
        }

        cause.printStackTrace();
        ctx.close();
        cause.printStackTrace();
        log.debug(cause);
    }

    @Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
        TSPPingMsg pingMsg = new TSPPingMsg();

        if (evt instanceof IdleStateEvent) {
        IdleStateEvent e = (IdleStateEvent) evt;
        if (e.state() == IdleState.READER_IDLE) {
            ctx.channel().close();
            log.debug("通道关闭=====");
        } else if (e.state() == IdleState.WRITER_IDLE) {
            ctx.writeAndFlush(new TSPPingMsg());
        }


        }

    }

    /*

    类型匹配
    *
    *      TSPSHARPBEND,  //急转弯事件
           TSPSHARPSLOWbOWN, //  急减速事件
           TSPSPEEDUP,       //急加速事件
           TSPDRIVING,      //疲劳驾驶
           TSPSPEEDPOLICE,  //超速报警
           TSPLDLE, //怠速报警
           TSPCONDRIVING,//连续驾驶
           TSPFENCE      //电子围栏
    *    messageReceived接收客户端的数据
    * */


    protected void channelRead0(ChannelHandlerContext ctx, BaseMsg msg) throws Exception {
        TSPReplyMsg  rep= new TSPReplyMsg();
       // BaseMsg type=(BaseMsg)msg;

        MsgListBean mb =(MsgListBean)msg;

       switch (mb.getType()) {

            case TSPLOGIN: { //GPS
             //TSPGpsBasicInfoVo gps=(TSPGpsBasicInfoVo)msg;
                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                log.info("channel连接数=="+NettyChannelMap.getAll().size());
                System.out.println( "channel连接数GPS===="+NettyChannelMap.getAll().size());
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);
                log.debug(mb.getClientId()+"======"+rep+"========");

               /*
               * 使用线程池开启线程处理任务
               * */

                gpsThread=new GpsThread(lists,jedis,kafk);
                threadPoolExecutor.execute(gpsThread);


            }
            break;
            case TSPWAKEUP: { //待机自换醒
              //  TSPWaitWakeUp wakeUp = (TSPWaitWakeUp) msg;
                LinkedList lists=mb.getMsgLinkedList();

                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                System.out.println( "channel连接数待机自换醒"+NettyChannelMap.getAll().size());
                 log.info("channel连接数"+NettyChannelMap.getAll().size());
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);

                /*
                * 线程池
                * */


               wakeUpTread=new WakeUpTread(lists,jedis,kafk);

               threadPoolExecutor.execute(wakeUpTread);



            }
            break;
           case TSPSHARPBEND: {   //急转弯事件
               //  TSPSharpBend sharpBend = (TSPSharpBend) msg;
               LinkedList lists=mb.getMsgLinkedList();
               if (NettyChannelMap.get(mb.getClientId()) == null) {
                   NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
               }
               rep.setId(mb.getId());
               rep.setType(mb.getType());
               NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);

               tspSharpBendThread=new TSPSharpBendThread(lists,jedis,kafk);
               threadPoolExecutor.execute(tspSharpBendThread);



            }
            break;
            case TSPSLOWBOWN: { //  急减速事件

              //  TSPSharpSlowBown slowBown = (TSPSharpSlowBown) msg;
                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }

                rep.setId(mb.getId());
                rep.setType(mb.getType());

                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);


                tspSharpSlowBownTread=new TSPSharpSlowBownTread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspSharpSlowBownTread);

            }
            break;
            case TSPSPEEDUP: { //急加速事件

              //  TSPSpeedUp speedUp = (TSPSpeedUp) msg;

                LinkedList lists=mb.getMsgLinkedList();
                getchannel(mb,ctx,rep);

                /* if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);*/



                tspSpeedUpTread=new TSPSpeedUpTread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspSpeedUpTread);



            }
            break;
            case TSPDRIVING: { //疲劳驾驶

               // TSPFatigueDriving fatigueDriving = (TSPFatigueDriving) msg;
                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);



                tspFatigueDrivingTread=new TSPFatigueDrivingTread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspFatigueDrivingTread);




            }
            break;
            case TSPSPEEDPOLICE: { //超速报警
               // TSPCallPolice speedPolice = (TSPCallPolice) msg;

                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);



                tspCallPoliceTread=new TSPCallPoliceTread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspCallPoliceTread);


            }
            break;
            case TSPLDLE: { //怠速报警
               // TSPLdleCallPolice ldleCall = (TSPLdleCallPolice) msg;
                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);




                tspLdleCallPoliceTread=new TSPLdleCallPoliceTread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspLdleCallPoliceTread);



            }
            break;
            case TSPCONDRIVING: { //持续驾驶报警
                //TSPContinuousDriving continDriving = (TSPContinuousDriving) msg;
                LinkedList lists=mb.getMsgLinkedList();
                if (NettyChannelMap.get(mb.getClientId()) == null) {
                    NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);

                tspConDrivingPoliThread=new TSPConDrivingPoliThread(lists,jedis,kafk);
                threadPoolExecutor.execute(tspConDrivingPoliThread);



            }
            break;
            case TSPFENCE: { //电子围栏
                TSPFence fence = (TSPFence) msg;
                if (NettyChannelMap.get(fence.getClientId()) == null) {
                    NettyChannelMap.add(fence.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setId(mb.getId());
                rep.setType(mb.getType());
                NettyChannelMap.get(fence.getClientId()).writeAndFlush(rep);

                String key = fence.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        fence.setVinCodee(vin);
                        fence.setUuiduuid(uuid);

                        Document doc = DocumentCommun.Fence2Doc(fence);

                        kafk.send("alarmInfo", doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("===========接收到电子围栏的数据======10=======" + (end-start) + "=SUCCESS++++++++++++");
            }
            break;
           case TSPCONFIGURE:{
               TSPConfigure config = (TSPConfigure) msg;
               if (NettyChannelMap.get(config.getClientId()) == null) {
                   NettyChannelMap.add(config.getClientId(), (SocketChannel) ctx.channel());
               }
               rep.setId(mb.getId());
               rep.setType(mb.getType());
               NettyChannelMap.get(config.getClientId()).writeAndFlush(rep);
           }break;
/*           case TSPPING: {
                //心跳信息
                TSPPingMsg pingMsg = (TSPPingMsg) msg;
                TSPPingMsg replyPing = new TSPPingMsg();
                replyPing.setI(500);
                NettyChannelMap.get(pingMsg.getClientId()).writeAndFlush(replyPing);

            }break;*/

           default:break;
        }
        ReferenceCountUtil.release(msg);
    }


    public void getchannel(MsgListBean mb,ChannelHandlerContext ctx,TSPReplyMsg  rep){

        if (NettyChannelMap.get(mb.getClientId()) == null) {
            NettyChannelMap.add(mb.getClientId(), (SocketChannel) ctx.channel());
        }
        rep.setId(mb.getId());
        rep.setType(mb.getType());
        NettyChannelMap.get(mb.getClientId()).writeAndFlush(rep);
    }

}
