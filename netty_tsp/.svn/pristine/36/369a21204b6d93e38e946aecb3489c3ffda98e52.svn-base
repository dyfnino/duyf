package tcp;

import msg.Constants;
import msg.TSPGpsBasicInfoVo;
import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.serialization.ClassResolvers;
import io.netty.handler.codec.serialization.ObjectDecoder;
import io.netty.handler.codec.serialization.ObjectEncoder;
import io.netty.handler.timeout.IdleStateHandler;
import io.netty.util.concurrent.DefaultEventExecutorGroup;
import io.netty.util.concurrent.EventExecutorGroup;
import msg.TSPGpsDate;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;

/**
 * Created with IntelliJ IDEA.
 * 作者: duyingfeng
 * 日期: 17-8-31
 * 说明:
 * To change this template use File | Settings | File Templates.
 */
public class NettyClientBootstrap {
    private int port;

    private String host;

    private SocketChannel socketChannel;

    private static final EventExecutorGroup group = new DefaultEventExecutorGroup(20);

    public NettyClientBootstrap(int port, String host) throws InterruptedException {

        this.port = port;

        this.host = host;

        start();

    }

    private void start() throws InterruptedException {

        EventLoopGroup eventLoopGroup=new NioEventLoopGroup();

        Bootstrap bootstrap=new Bootstrap();

        bootstrap.channel(NioSocketChannel.class);

        bootstrap.option(ChannelOption.SO_KEEPALIVE,true);

        bootstrap.group(eventLoopGroup);

        bootstrap.remoteAddress(host,port);

        bootstrap.handler(new ChannelInitializer<SocketChannel>() {

            @Override

            protected void initChannel(SocketChannel socketChannel) throws Exception {

                socketChannel.pipeline().addLast(new IdleStateHandler(20,10,0));

                socketChannel.pipeline().addLast(new ObjectEncoder());

                socketChannel.pipeline().addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));

                socketChannel.pipeline().addLast(new NettyClientHandler());

            }

        });

        ChannelFuture future =bootstrap.connect(host,port).sync();

        if (future.isSuccess()) {

            socketChannel = (SocketChannel)future.channel();

            System.out.println("connect server  成功---success------");

        }

    }

    public static void main(String[]args) throws InterruptedException {
        Date currentTime = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        int i=0;
        while (true){
            TSPGpsBasicInfoVo  gpsBasicInfoVo=new TSPGpsBasicInfoVo();
            Constants.setClientId("358732057284420");
            NettyClientBootstrap bootstrap=new NettyClientBootstrap(9999,"192.168.1.104");

            TSPGpsDate list=new TSPGpsDate();
            ArrayList lists=new ArrayList();


                gpsBasicInfoVo.setLatitude(""+i);
                lists.add(gpsBasicInfoVo);
                list.setListGps(lists);


/*          gpsBasicInfoVo.setAltitude(2.888888888888888);
            gpsBasicInfoVo.setDirector(5555555);
            gpsBasicInfoVo.setSpeedsss(3455);
            gpsBasicInfoVo.setTimeStam(2222222);
            gpsBasicInfoVo.setClientId("sssssssssssss");
            gpsBasicInfoVo.setTermCode("862095027438958");*/

            String dateString = formatter.format(currentTime);

            System.out.println("发送对象时间==========="+ gpsBasicInfoVo.getLatitude()+"XXXXXXXXXXX" + dateString + "XXXXXXXXXXXXXXXXXXXX");
            bootstrap.socketChannel.writeAndFlush(list);
            System.out.println("++++++++++++++++++++++客户端发送次数=======" + gpsBasicInfoVo.getLatitude());
            TimeUnit.SECONDS.sleep(5);
            i++;
        }

    }
}
