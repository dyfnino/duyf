package com.samton.util;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

import java.util.List;
import java.util.Set;

/**
 * Created with IntelliJ IDEA.
 * 作者: duyingfeng
 * 日期: 17-9-9
 * 说明:
 * To change this template use File | Settings | File Templates.
 */
public class RedisUtil {
    private JedisPool pool=null;
    /**
     * <p>传入ip和端口号构建redis连接池</p>
     * @param ip
     * @param  prot
     */
    public RedisUtil(String ip,int prot,String pass) {
        if (pool ==null) {
            JedisPoolConfig config = new JedisPoolConfig();
            //控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；
            //如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
            //config.setMaxActive(500);
            //控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。
            config.setMaxIdle(5);
            //表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；
        //    config.setMaxWait(1000 * 100);
            //在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
            config.setTestOnBorrow(true);
            // pool =new JedisPool(config, "192.168.161.130", 6379, 100000);
            //JedisPool pool = new JedisPool(config,"192.168.161.130",6379,15000,"wb",12);
          /*  JedisPool pool = new JedisPool(config,"192.168.161.130", 6379, 15000);
            Jedis client = pool.getResource();//从pool中获取资源*/
            pool =new JedisPool(config, ip, prot,100000,pass);
        }
    }

    /**
     * <p>通过配置对象 ip 端口构建连接池</p>
     * @param config 配置对象
     * @param ip ip
     * @param prot 端口
     *   pass 用户
     */
    public RedisUtil(JedisPoolConfig config ,String ip,int prot,String pass){
        if (pool ==null) {
            pool =new JedisPool(config,ip,prot,10000,pass);
        }
    }

    /**
     * <p>通过配置对象 ip 端口超时时间构建连接池</p>
     * @param config 配置对象
     * @param ip ip
     * @param prot 端口
     * @param timeout 超时时间
     */
    public RedisUtil(JedisPoolConfig config ,String ip,int prot ,int timeout,String pass){
        if (pool ==null) {
            pool =new JedisPool(config,ip,prot,timeout,pass);
        }
    }

    /**
     * <p>通过连接池对象构建一个连接池</p>
     * @param pool 连接池对象
     */
    public RedisUtil(JedisPool pool){
        if (this.pool == null) {
            this.pool = pool;
        }
    }

    /**
     * <p>通过key获取储存在redis中的value</p>
     * <p>并释放连接</p>
     * @param key
     * @return成功返回value失败返回null
     */
    public String get(String key){
        Jedis jedis = null;
        String value = null;
        try {
            jedis = pool.getResource();
            value = jedis.get(key);
        } catch (Exception e) {
            pool.returnBrokenResource(jedis);
            e.printStackTrace();
        } finally {
            returnResource(pool, jedis);
        }
        return value;
    }


    public String hget(String key, String field){
        Jedis jedis = null;
        String res = null;
        try {
            jedis = pool.getResource();
            res = jedis.hget(key, field);
        } catch (Exception e) {
            pool.returnBrokenResource(jedis);
            e.printStackTrace();
        } finally {
            returnResource(pool, jedis);
        }
        return res;
    }

    /**
     * <p>通过key 和 fields 获取指定的value如果没有对应的value则返回null</p>
     * @param key
     * @param fields 可以使一个String也可以是 String数组
     * @return
     */
    public List<String> hmget(String key,String...fields){
        Jedis jedis = null;
        List<String> res = null;
        try {
            jedis = pool.getResource();
            res = jedis.hmget(key, fields);
        } catch (Exception e) {
            pool.returnBrokenResource(jedis);
            e.printStackTrace();
        } finally {
            returnResource(pool, jedis);
        }
        return res;
    }


    /**
     * <p>通过key返回所有set的并集</p>
     * @param keys 可以使一个string也可以是一个string数组
     * @return
     */
    public Set<String> sunion(String... keys){
        Jedis jedis = null;
        Set<String> res = null;
        try {
            jedis = pool.getResource();
            res = jedis.sunion(keys);
        } catch (Exception e) {
            pool.returnBrokenResource(jedis);
            e.printStackTrace();
        } finally {
            returnResource(pool, jedis);
        }
        return res;
    }


    /**
     * <p>通过key获取set中所有的value</p>
     * @param key
     * @return
     */
    public Set<String> smembers(String key){
        Jedis jedis = null;
        Set<String> res = null;
        try {
            jedis = pool.getResource();
            res = jedis.smembers(key);
        } catch (Exception e) {
            pool.returnBrokenResource(jedis);
            e.printStackTrace();
        } finally {
            returnResource(pool, jedis);
        }
        return res;
    }



    /**
     * 返还到连接池
     *
     * @param pool
     * @param  jedis
     */
    public static void returnResource(JedisPool pool, Jedis jedis) {
        if (jedis !=null) {
            pool.returnResource(jedis);
        }
    }
/*    //测试两个
    public static void main(String[]args)throws Exception{
        RedisUtil r = new RedisUtil("192.168.161.130",6379);
        String t = r.set("wb","wbwbwb");
        String s = r.get("wb");
        System.out.println(t+"-----"+s);
    }*/

}
