package com.samton.server;

import com.samton.util.DocumentCommun;
import com.samton.util.LogProducerUtils;


import com.samton.util.RedisUtil;
import enums.MsgType;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import io.netty.util.ReferenceCountUtil;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.socket.SocketChannel;
import io.netty.util.internal.logging.Slf4JLoggerFactory;
import msg.*;
import org.bson.Document;
import redis.clients.jedis.Jedis;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;


/**
 * Created with IntelliJ IDEA.
 * 作者: duyingfeng
 * 日期: 17-8-31
 * 说明:
 * T
 */
public class NettyServerHandler extends SimpleChannelInboundHandler<BaseMsg> {
    private static final InternalLogger log = InternalLoggerFactory.getInstance(NettyServerHandler.class);
    private GpsThread gpsThread=null;
    private WakeUpTread  wakeUpTread=null;
    private TSPSpeedUpTread  tspSpeedUpTread=null;
    private TSPSharpBendThread tspSharpBendThread=null;
    private TSPSharpSlowBownTread tspSharpSlowBownTread=null;
    private TSPCallPoliceTread     tspCallPoliceTread=null;
    private TSPFatigueDrivingTread tspFatigueDrivingTread=null;
    private TSPLdleCallPoliceTread  tspLdleCallPoliceTread=null;

    private ThreadPoolExecutor threadPoolExecutor  =ThreadPoolExecutor.getInstance();


    public NettyServerHandler(LogProducerUtils kafk, Jedis jedis) {
        this.kafk = kafk;
        this.jedis = jedis;
    }

    private  Jedis jedis;
    private  LogProducerUtils kafk;

    public LogProducerUtils getKafk() {
        return kafk;
    }

    public void setKafk(LogProducerUtils kafk) {
        this.kafk = kafk;
    }

    public Jedis getJedis() {
        return jedis;
    }

    public void setJedis(Jedis jedis) {
        this.jedis = jedis;
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
        //channel失效，从Map中移除
        NettyChannelMap.remove((SocketChannel) ctx.channel());
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        System.out.println("错误原因：" + cause.getMessage());
        ctx.fireExceptionCaught(cause);
        cause.printStackTrace();
        log.info(cause);
    }

    @Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception {
        TSPPingMsg pingMsg = new TSPPingMsg();
        if (msg instanceof IdleStateEvent) {
            IdleStateEvent e = (IdleStateEvent) msg;

            switch (e.state()) {
                case WRITER_IDLE:

                    ctx.writeAndFlush(pingMsg);
                    System.out.println("send ping to client----------");
                    break;
                case READER_IDLE:

                    ctx.writeAndFlush(pingMsg);
                    System.out.println("send ping to client----------");
                    break;
                case ALL_IDLE:
                    ctx.writeAndFlush(pingMsg);
                    System.out.println("send ping to client----------");
                    break;
                default:
                    break;
            }
        }
    }

    /*

    类型匹配
    *
    *      TSPSHARPBEND,  //急转弯事件
           TSPSHARPSLOWbOWN, //  急减速事件
           TSPSPEEDUP,       //急加速事件
           TSPDRIVING,      //疲劳驾驶
           TSPSPEEDPOLICE,  //超速报警
           TSPLDLE, //怠速报警
           TSPCONDRIVING,//连续驾驶
           TSPFENCE      //电子围栏
    *    messageReceived接收客户端的数据
    * */

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, BaseMsg msg) throws Exception {
        TSPReplyMsg  rep= new TSPReplyMsg();
        BaseMsg type=(BaseMsg)msg;




        switch (type.getType()) {
            case TSPLOGIN: { //GPS
                TSPGpsBasicInfoVo gps=(TSPGpsBasicInfoVo)msg;

                if (NettyChannelMap.get(gps.getClientId()) == null) {
                    NettyChannelMap.add(gps.getClientId(), (SocketChannel) ctx.channel());
                }
                System.out.println( "channel连接数"+NettyChannelMap.getAll().size());
                rep.setReply(msg.getUuid()+"TSPLOGIN");
                System.out.println("gps的数据标识" + gps.getType());
                NettyChannelMap.get(msg.getClientId()).writeAndFlush(rep);
               /*
               * 使用线程池开启线程处理任务
               * */
                log.debug("================="+gps+"=========="+jedis+"============"+kafk);
                gpsThread=new GpsThread(gps,jedis,kafk);
                threadPoolExecutor.execute(gpsThread);

               // System.out.println("GPSUUID========"+msg.getUuid());

                /*String key = gps.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    System.out.println(jedis.hmget("carEquipment", key));
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];

                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);
                        gps.setVinCodee(vin);
                        gps.setUuiduuid(uuid);
                        gps.setTempOnes(-1L);
                        gps.setTempTwos(-1L);
                        gps.setTempThre(-1L);
                        gps.setWifiStat(0);
                        gps.setSignalLv(5);
                        gps.setAltitude(-1.0);//
                        Document doc = DocumentCommun.GisVo2Doc(gps);

                        kafk.send("gisInfo", doc.toJson());
                        log.debug("kafkq输出"+doc.toJson());
                        System.out.println("gisInfo"+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("++++++++++++接收到GPS的数据======1======"+(end-start)+" =SUCCESS++++++++++++");*/
            }
            break;
            case TSPWAKEUP: { //待机自换醒
                TSPWaitWakeUp wakeUp = (TSPWaitWakeUp) msg;


                if (NettyChannelMap.get(wakeUp.getClientId()) == null) {
                    NettyChannelMap.add(wakeUp.getClientId(), (SocketChannel) ctx.channel());
                }
                System.out.println( "channel连接数"+NettyChannelMap.getAll().size());
                System.out.println("wakeUp的数据标识"+wakeUp.getType());
                rep.setReply(msg.getUuid());
                NettyChannelMap.get(wakeUp.getClientId()).writeAndFlush(rep);

                /*
                * 线程池
                * */

                log.debug("================="+wakeUp+"=========="+jedis+"============"+kafk);
                wakeUpTread=new WakeUpTread(wakeUp,jedis,kafk);

                threadPoolExecutor.execute(wakeUpTread);


               /* String key = wakeUp.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);
                        log.debug("开机自唤醒的"+uuid);
                        System.out.println("开机自唤醒的"+uuid);
                        wakeUp.setVinCodee(vin);
                        wakeUp.setUuiduuid(uuid);
                        wakeUp.setVoltagee(0.0);

                        Document doc = DocumentCommun.getWakeup2Doc(wakeUp);
                        kafk.send("wakeUpInfo", doc.toJson());
                        log.debug("wakeUpInfo待机自换醒输出===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("++++++++++++接收到wakeUp的数据======2======"+(end-start)+" =SUCCESS++++++++++++");*/
            }
            break;
            case TSPSHARPBEND: {   //急转弯事件
                TSPSharpBend sharpBend = (TSPSharpBend) msg;


                if (NettyChannelMap.get(sharpBend.getClientId()) == null) {
                    NettyChannelMap.add(sharpBend.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());
                NettyChannelMap.get(sharpBend.getClientId()).writeAndFlush(rep);


                log.debug("================="+sharpBend+"=========="+jedis+"============"+kafk);
                tspSharpBendThread=new TSPSharpBendThread(sharpBend,jedis,kafk);
                threadPoolExecutor.execute(tspSharpBendThread);


                /*String key = sharpBend.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);
                        sharpBend.setVinCodee(vin);
                        sharpBend.setUuiduuid(uuid);

                        Document doc = DocumentCommun.getSharpBend2Doc(sharpBend);
                        kafk.send("drivingHabitInfo", doc.toJson());
                        log.debug("急转弯事件输出===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("============接收到急转弯事件的数据========3====" + (end-start) + "=SUCCESS++++++++++++");*/
            }
            break;
            case TSPSLOWBOWN: { //  急减速事件

                TSPSharpSlowBown slowBown = (TSPSharpSlowBown) msg;

                if (NettyChannelMap.get(slowBown.getClientId()) == null) {
                    NettyChannelMap.add(slowBown.getClientId(), (SocketChannel) ctx.channel());
                }

                rep.setReply(msg.getUuid());

                NettyChannelMap.get(slowBown.getClientId()).writeAndFlush(rep);

                log.debug("================="+slowBown+"=========="+jedis+"============"+kafk);
                tspSharpSlowBownTread=new TSPSharpSlowBownTread(slowBown,jedis,kafk);
                threadPoolExecutor.execute(tspSharpSlowBownTread);
                /*String key = slowBown.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        slowBown.setVinCodee(vin);
                        slowBown.setUuiduuid(uuid);

                        Document doc = DocumentCommun.getSpeeddown2Doc(slowBown);

                        kafk.send("drivingHabitInfo", doc.toJson());
                        log.debug("急减速事件输出===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========急减速事件处理速度==========4====" + (end - start) + "=========================");*/
            }
            break;
            case TSPSPEEDUP: { //急加速事件

                TSPSpeedUp speedUp = (TSPSpeedUp) msg;

                if (NettyChannelMap.get(speedUp.getClientId()) == null) {
                    NettyChannelMap.add(speedUp.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());
                NettyChannelMap.get(speedUp.getClientId()).writeAndFlush(rep);


                log.debug("================="+speedUp+"=========="+jedis+"============"+kafk);
                tspSpeedUpTread=new TSPSpeedUpTread(speedUp,jedis,kafk);
                threadPoolExecutor.execute(tspSpeedUpTread);

               /* String key = speedUp.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        speedUp.setVinCodee(vin);
                        speedUp.setUuiduuid(uuid);


                        Document doc = DocumentCommun.getSpeedUp2Doc(speedUp);
                        kafk.send("drivingHabitInfo", doc.toJson());
                        log.debug("急加速事件输出===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========急加速事件处理速度=========5======" + (end - start) + "=========================");*/

            }
            break;
            case TSPDRIVING: { //疲劳驾驶

                TSPFatigueDriving fatigueDriving = (TSPFatigueDriving) msg;

                if (NettyChannelMap.get(fatigueDriving.getClientId()) == null) {
                    NettyChannelMap.add(fatigueDriving.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());
                NettyChannelMap.get(fatigueDriving.getClientId()).writeAndFlush(rep);


                log.debug("================="+fatigueDriving+"=========="+jedis+"============"+kafk);
                tspFatigueDrivingTread=new TSPFatigueDrivingTread(fatigueDriving,jedis,kafk);
                threadPoolExecutor.execute(tspFatigueDrivingTread);


                /*String key = fatigueDriving.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        fatigueDriving.setVinCodee(vin);
                        fatigueDriving.setUuiduuid(uuid);

                        Document doc = DocumentCommun.FatigueDriving2Doc(fatigueDriving);

                        kafk.send("drivingHabitInfo", doc.toJson());
                        log.debug("疲劳驾驶输出===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========疲劳驾驶查处理（redis查询kafK发送）========6=======" + (end - start) + "=========================");*/

            }
            break;
            case TSPSPEEDPOLICE: { //超速报警
                TSPCallPolice speedPolice = (TSPCallPolice) msg;
                if (NettyChannelMap.get(speedPolice.getClientId()) == null) {
                    NettyChannelMap.add(speedPolice.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());

                NettyChannelMap.get(speedPolice.getClientId()).writeAndFlush(rep);


                log.debug("================="+speedPolice+"=========="+jedis+"============"+kafk);
                tspCallPoliceTread=new TSPCallPoliceTread(speedPolice,jedis,kafk);
                threadPoolExecutor.execute(tspCallPoliceTread);

                /*String key = speedPolice.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        speedPolice.setVinCodee(vin);
                        speedPolice.setUuiduuid(uuid);


                        Document doc = DocumentCommun.CallPolice2Doc(speedPolice);

                        kafk.send("alarmInfo", doc.toJson());
                        log.debug("超速报警===="+doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========超速报警========7=======" + (end-start) + "=========================");*/
            }
            break;
            case TSPLDLE: { //怠速报警
                TSPLdleCallPolice ldleCall = (TSPLdleCallPolice) msg;

                if (NettyChannelMap.get(ldleCall.getClientId()) == null) {
                    NettyChannelMap.add(ldleCall.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());

                NettyChannelMap.get(ldleCall.getClientId()).writeAndFlush(rep);


                //TSPLdleCallPoliceTread  tspLdleCallPoliceTread
                log.debug("================="+ldleCall+"=========="+jedis+"============"+kafk);
                tspLdleCallPoliceTread=new TSPLdleCallPoliceTread(ldleCall,jedis,kafk);
                threadPoolExecutor.execute(tspLdleCallPoliceTread);
                /*String key = ldleCall.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        ldleCall.setVinCodee(vin);
                        ldleCall.setUuiduuid(uuid);

                        Document doc = DocumentCommun.LdleCallPolice2Doc(ldleCall);

                        kafk.send("alarmInfo", doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========怠速报警==========8=====" + (end-start)+ "=========================");*/


            }
            break;
            case TSPCONDRIVING: { //持续驾驶报警
                TSPContinuousDriving continDriving = (TSPContinuousDriving) msg;
                if (NettyChannelMap.get(continDriving.getClientId()) == null) {
                    NettyChannelMap.add(continDriving.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());

                NettyChannelMap.get(continDriving.getClientId()).writeAndFlush(rep);

                String key = continDriving.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        continDriving.setVinCodee(vin);
                        continDriving.setUuiduuid(uuid);

                        Document doc = DocumentCommun.ContinuousDriving2Doc(continDriving);

                        kafk.send("alarmInfo", doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("========持续驾驶报警=========9======" + (end-start) + "=========================");

            }
            break;
            case TSPFENCE: { //电子围栏
                TSPFence fence = (TSPFence) msg;
                if (NettyChannelMap.get(fence.getClientId()) == null) {
                    NettyChannelMap.add(fence.getClientId(), (SocketChannel) ctx.channel());
                }
                rep.setReply(msg.getUuid());

                NettyChannelMap.get(fence.getClientId()).writeAndFlush(rep);

                String key = fence.getTermCode();
                String vin = "";
                String uuid = "";
                long start = System.currentTimeMillis();
                if (jedis.hmget("carEquipment", key).get(0) != null) {
                    vin = jedis.hmget("carEquipment", key).get(0).split("car_card=")[1].split("}")[0];
                    if (jedis.hmget("carvinuuid", vin) != null) {
                        uuid = jedis.hmget("carvinuuid", vin).get(0);

                        fence.setVinCodee(vin);
                        fence.setUuiduuid(uuid);

                        Document doc = DocumentCommun.Fence2Doc(fence);

                        kafk.send("alarmInfo", doc.toJson());
                    }
                }
                long end = System.currentTimeMillis();
                System.out.println("===========接收到电子围栏的数据======10=======" + (end-start) + "=SUCCESS++++++++++++");
            }
            break;
            case TSPPING: {
                //心跳信息
                TSPPingMsg pingMsg = (TSPPingMsg) msg;
                TSPPingMsg replyPing = new TSPPingMsg();
                replyPing.setI(500);
                NettyChannelMap.get(pingMsg.getClientId()).writeAndFlush(replyPing);

            }
            break;
            default:break;
        }
        ReferenceCountUtil.release(msg);
    }

}
