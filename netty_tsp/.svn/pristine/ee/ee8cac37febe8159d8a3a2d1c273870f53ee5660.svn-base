package com.samton.server;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.serialization.ClassResolvers;
import io.netty.handler.codec.serialization.ObjectDecoder;
import io.netty.handler.codec.serialization.ObjectEncoder;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import io.netty.util.concurrent.DefaultEventExecutorGroup;
import io.netty.util.concurrent.EventExecutorGroup;
import io.netty.util.internal.logging.InternalLoggerFactory;
import io.netty.util.internal.logging.Slf4JLoggerFactory;
import msg.Constants;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;


/**
 * Created with IntelliJ IDEA.
 * 作者: duyingfeng
 * 日期: 17-8-31
 * 说明:
 * To change this template use File | Settings | File Templates.
 */
public class NettyServerBootstrap {
    private static final Logger logger = Logger.getLogger(NettyServerBootstrap.class.getName());

    private int port;
    private SocketChannel socketChannel;
    static final EventExecutorGroup group = new DefaultEventExecutorGroup(16);
    public NettyServerBootstrap(int port) throws InterruptedException {
        this.port = port;
        bind();
    }
    private void bind() throws InterruptedException {
          /*OrderedMemoryAwareThreadPoolExecutor(threadNums, maxChannelMemorySize,
                maxTotalMemorySize, keepAliveTime,TimeUnit.SECONDS);*/
  /*      ExecutionHandler executionHandler = new ExecutionHandler(
                new MemoryAwareThreadPoolExecutor(16, 1048576, 1048576));*/

/*        EventLoopGroup boss=new NioEventLoopGroup();

        EventLoopGroup worker=new NioEventLoopGroup(2);

        try{

            ServerBootstrap bootstrap=new ServerBootstrap();

            bootstrap.group(boss,worker);
            bootstrap.channel(NioServerSocketChannel.class);
            //所有的数据都是按照队列处理的，不能被及时处理的放入队列，设置可容纳队列大小
            bootstrap.childOption(ChannelOption.SO_BACKLOG, 1024);

            //通过NoDelay禁用Nagle,使消息立即发出去，不用等待到一定的数据量才发出去
            bootstrap.childOption(ChannelOption.TCP_NODELAY, true);

            //保持长连接状态

            bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);

            bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {

                @Override
                protected void initChannel(SocketChannel socketChannel) throws Exception {

                    ChannelPipeline p = socketChannel.pipeline();

*//*                    ObjectDecoder objectDecoder = new ObjectDecoder(1024 * 1024,
                            ClassResolvers.weakCachingConcurrentResolver(this.getClass().getClassLoader()));*//*
                    p.addLast(new ObjectEncoder());
                    p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));

                    p.addLast(new NettyServerHandler());


                }
            });
            ChannelFuture f=bootstrap.bind(port).sync();
            System.out.println("server start---------------");
            f.channel().closeFuture().sync();
        }finally{
            boss.shutdownGracefully();
            worker.shutdownGracefully();
        }*/
        EventLoopGroup boss=new NioEventLoopGroup();

        EventLoopGroup worker=new NioEventLoopGroup(4);
        try{


        ServerBootstrap bootstrap=new ServerBootstrap();

        bootstrap.group(boss,worker);

        bootstrap.channel(NioServerSocketChannel.class);

        //所有的数据都是按照队列处理的，不能被及时处理的放入队列，设置可容纳队列大小
      //  bootstrap.childOption(ChannelOption.SO_BACKLOG,1024);

        //通过NoDelay禁用Nagle,使消息立即发出去，不用等待到一定的数据量才发出去

        bootstrap.childOption(ChannelOption.TCP_NODELAY, true);
        //设置缓存区大小
        bootstrap.childOption(ChannelOption.SO_RCVBUF, 1024);
        //保持长连接状态
        bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);

        bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {

            @Override
            protected void initChannel(SocketChannel socketChannel) throws Exception {

                ChannelPipeline p = socketChannel.pipeline();

/*                ObjectDecoder objectDecoder = new ObjectDecoder(1024*1024,
                        ClassResolvers.weakCachingConcurrentResolver(this
                                .getClass().getClassLoader()));*/

                p.addLast("logging",new LoggingHandler(LogLevel.INFO));
                p.addLast(new ObjectEncoder());

                p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));

                p.addLast(group,new NettyServerHandler());

            }

        });
        ChannelFuture f= bootstrap.bind(9999).sync();
/*        if(f.isSuccess()){
            System.out.println("server start---------------");
        }*/

            System.out.println("server start---------------");
            f.channel().closeFuture().sync();

    }finally{
        boss.shutdownGracefully();
        worker.shutdownGracefully();
    }



    }

    public static void main(String []args) throws InterruptedException {
       InternalLoggerFactory.setDefaultFactory(new Slf4JLoggerFactory());
       NettyServerBootstrap bootstrap=new NettyServerBootstrap(9999);

        while (true){
           // SocketChannel channel=(SocketChannel) NettyChannelMap.get(Constants.getClientId());
            TimeUnit.SECONDS.sleep(5);
        }
    }

}